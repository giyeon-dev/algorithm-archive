name: Weekly Retrospective (KST)

on:
  schedule:
    # Every Sunday 15:05 UTC = Monday 00:05 KST
    - cron: "5 15 * * 0"
  workflow_dispatch:

jobs:
  create-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - id: week
        name: Compute KST ISO week
        shell: bash
        run: |
          TAG=$(TZ=Asia/Seoul date +'%G-W%V')
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create weekly retrospective issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = "${{ steps.week.outputs.tag }}";
            const title = `Weekly Retrospective: ${tag}`;


            const body = [
              '### Checklist',
              '- [ ] Giyeon: 3+ problems',
              '- [ ] Jieun: 3+ problems',
              '',
              '### Notes',
              '- What I learned',
              '- Mistakes',
              '- Next weekâ€™s plan',
              '',
              '> Scoreboard in README updates automatically after merges to main.'
            ].join('\n');

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // 0) archived repo safety
            const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
            if (repoInfo.archived) {
              core.info("Repository is archived. Skipping.");
              return;
            }

            // 1) ensure label exists
            const labelName = "retrospective";
            try {
              await github.rest.issues.getLabel({ owner, repo, name: labelName });
            } catch (err) {
              if (err.status === 404) {
                await github.rest.issues.createLabel({
                  owner, repo, name: labelName, color: "0e8a16", description: "Weekly retrospective"
                });
              } else {
                throw err;
              }
            }

            // 2) avoid duplicates
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: "open", per_page: 100
            });
            if (issues.find(i => i.title === title)) {
              core.info(`Issue "${title}" already exists. Skipping.`);
              return;
            }

            // 3) create issue
            await github.rest.issues.create({
              owner, repo, title, body, labels: [labelName]
            });
